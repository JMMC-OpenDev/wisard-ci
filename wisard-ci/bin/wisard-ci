#!/bin/bash
#*******************************************************************************
# JMMC project ( http://www.jmmc.fr ) - Copyright (C) CNRS.
#*******************************************************************************

#
# WISARD COMMON INTERFACE wrapper
#


# HERE BEGINS THE SCRIPT

#make FULLSCRIPTNAME and SCRIPTROOT fully qualified
FULLSCRIPTNAME=$(readlink -f $0)
SCRIPTNAME=$(basename $FULLSCRIPTNAME)
SCRIPTROOT=$(readlink -f $( dirname $FULLSCRIPTNAME)/..)

#source main environment if any
if [ -e "$SCRIPTROOT/bin/env.sh" ]
then
  source $SCRIPTROOT/bin/env.sh
fi

# Print usage and exit program
function printUsage ()
{
  echo -e "Usage: $SCRIPTNAME [-h] [-v] [-d] [-f fov] [-i init_img] <input> <output>"
  echo -e "\t-h\tprint this help."
  echo -e "\t-v\tprint version. "
  echo -e ""
  echo -e "The following options are available in manual mode only, not through the Oimaging interface:"
  echo -e "\t-d : display graphs."
  echo -e "\t-i init_img : pass startup (guess) image (FITS format)."
  echo -e "\t-f fov : field-of-view in mas."
  echo -e "\t-n nbiter : number of iterations."
  echo -e "\t-r regularisation name : one of 'TOTVAR','PSD', 'L1L2', 'L1L2_WHITE', 'SOFT_SUPPORT' "
  exit 1
}

# Print version and exit program
function printVersion ()
{
  # WISARD_CI_VERSION is declared as env var in the DockerFile
  if [ -z "$WISARD_CI_VERSION" ]
  then
    echo "WISARD_CI_VERSION undefined"
  else
    echo $WISARD_CI_VERSION
  fi
  exit 0
}


# Parse command-line parameters
while getopts "hvdf:i:n:r:" option
do
    case $option in
        h ) 
            printUsage ;;
        v ) 
            printVersion ;;
        f ) # fov
            FOVCOMMAND=', fov='"$OPTARG"' ';
	    ;;
        d ) # display
            DISPLAYCOMMAND=', /display ';
	    ;;
        i ) # init_image
            INIT_IMAGE_COMMAND=', init_img='\'"$OPTARG"\'' ';
	    ;;
        n ) # nbiter
            NBITER_COMMAND=', nbiter='\'"$OPTARG"\'' ';
	    ;;
        r ) # regul
            REGUL_COMMAND=', regul='\'"$OPTARG"\'' ';
	    ;;
        * ) # Unknown option
            echo "Invalid option -- $option"
            printUsage ;;
    esac
done

let SHIFTOPTIND=$OPTIND-1
shift $SHIFTOPTIND

if [ $# -lt 2 ]
then
    echo "ERROR: Missing arguments"
    printUsage 
fi

INPUT="$(readlink -f $1)"
OUTPUT="$(readlink -f $2)"
echo "DEBUG input=$INPUT"
echo "DEBUG output=$OUTPUT"

# Run execution
cd $SCRIPTROOT
# If env var is defined, assume we are remote on the JMMC servers.
if [ -z "$WISARD_CI_VERSION" ]
then
  INTERACTIVECOMMAND=', /interactive ';
else 
  # add helper to launch gdl properly
  export GDL_STARTUP="gdl_startup.pro"
fi

WISARDCI_COMMAND="wisardgui,'"$INPUT"','"$OUTPUT"'"${DISPLAYCOMMAND}${FOVCOMMAND}${INIT_IMAGE_COMMAND}${NBITER_COMMAND}${REGUL_COMMAND}${INTERACTIVECOMMAND}
gdl -e "$WISARDCI_COMMAND"
